user  {{if env "NGINX_USER"}}{{env "NGINX_USER"}}{{else}}www-data{{end}};
worker_processes  {{if env "WORKER_PROCESSES"}}{{env "WORKER_PROCESSES"}}{{else}}1{{end}};
error_log  /dev/stderr warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  {{if env "WORKER_CONNECTIONS"}}{{env "WORKER_CONNECTIONS"}}{{else}}1024{{end}};
}

http {

  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout {{if env "KEEPALIVE_TIMEOUT"}}{{env "KEEPALIVE_TIMEOUT"}}{{else}}65{{end}};
  log_format proxy_log '$remote_addr - $http_x_forwarded_for - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent "$http_referer" ' '"$http_user_agent"' ;
  server_tokens off;
  server_names_hash_bucket_size 128;

  {{if env "LDAP_URL"}}
  ldap_server ldapserver {
    url {{env "LDAP_URL"}};
    binddn {{env "LDAP_BINDDN"}};
    binddn_passwd {{env "LDAP_BINDDN_PASSWD"}};
    {{if env "LDAP_GROUP"}}
    group_attribute member;
    group_attribute_is_dn on;
    require group '{{env "LDAP_GROUP"}}';
    {{end}}
    require valid_user;
    satisfy all;
  }
  {{end}}

  server {
    server_name localhost;
    listen 80;
    {{if env "NGINX_SSL_CERT_PATH"}}
    listen 443 ssl;
    {{end}}
    error_log /dev/stderr;
    access_log /dev/stdout proxy_log;
    location / { return 503; }
    root /dev/null;

    {{if env "NGINX_SSL_CERT_PATH"}}
    ssl_certificate {{env "NGINX_SSL_CERT_PATH"}};
    ssl_certificate_key {{env "NGINX_SSL_KEY_PATH"}};
    ssl_prefer_server_ciphers on;
    ssl_protocols  SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;
    {{end}}
  }

  #
  # SERVICE CONSUL-UI
  #

  upstream consul-ui {
    server {{if env "CONSUL"}}{{env "CONSUL"}}{{else}}127.0.0.1:8500{{end}};
  }

  server {
    listen 80;
    {{if env "NGINX_SSL_CERT_PATH"}}
    listen 443 ssl;
    {{end}}
    error_log /dev/stderr;
    access_log /dev/stdout proxy_log;
    root /dev/null;

    {{if env "NGINX_SSL_CERT_PATH"}}
    ssl_certificate {{env "NGINX_SSL_CERT_PATH"}};
    ssl_certificate_key {{env "NGINX_SSL_KEY_PATH"}};
    ssl_prefer_server_ciphers on;
    ssl_protocols  SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    {{end}}

    client_max_body_size 0;
    chunked_transfer_encoding on;

    server_name "consul-ui.{{if env "DOMAIN"}}{{env "DOMAIN"}}{{else}}dev{{end}}";

    {{if key "nginx/consul/server_config" }}
      {{ with $server_config := printf "nginx/consul/server_config" | key }}
        {{ $server_config }}
      {{ end }}
    {{ end }}

    location / {
      {{if env "LDAP_URL"}}
        auth_ldap "restricted access";
        auth_ldap_servers ldapserver;
      {{end}}

      {{if env "REQUEST_AUTH"}}
        auth_request /auth;
        auth_request_set $user $upstream_http_x_user;
      {{end}}

      proxy_pass http://consul-ui/;
      include proxy.conf;
      {{if key "nginx/consul/server_config_location" }}
        {{ with $server_config_location := printf "nginx/consul/server_config_location" | key }}
          {{ $server_config_location }}
        {{ end }}
      {{ end }}

    }

    {{if env "REQUEST_AUTH"}}
    location = /auth {
      proxy_pass              {{env "REQUEST_AUTH_URL"}};
      proxy_pass_request_body off;
      proxy_set_header        Host                    {{env "REQUEST_AUTH_HOST"}};
      proxy_set_header        Referer                 $http_referer;
      proxy_set_header        Cookie                  $http_cookie;
      proxy_set_header        X-Real-IP               $remote_addr;
      proxy_set_header        X-Forwarded-Host        {{env "REQUEST_AUTH_HOST"}};
      proxy_set_header        X-Forwarded-Server      $host;
      proxy_set_header        X-Origin-URI            $request_uri;
      proxy_set_header        Content-Length          '0';
    }
    {{end}}
  }


  #
  # BACKEND DISCOVERY SERVICE
  #

  {{ range $service := services }}{{ if ne .Name "consul" }}
  upstream {{ $service.Name }} {
    {{ range $tag, $services := service .Name | byTag }}{{ if eq $tag "http" }}{{ range $services }}
    server {{ .Address }}:{{ .Port }}; {{ end }}{{ else }}   server 127.0.0.1:65535;{{ end }}{{ end }}
  }
  {{ end }}{{ end }}

  {{ range $service := services }}{{ if ne $service.Name "consul" }}

  #
  # {{ $service.Name }}
  #

  server {
    listen 80;
    {{if env "NGINX_SSL_CERT_PATH"}}
    listen 443 ssl;
    {{end}}
    error_log /dev/stderr;
    access_log /dev/stdout proxy_log;
    root /dev/null;

    {{if env "NGINX_SSL_CERT_PATH"}}
    ssl_certificate {{env "NGINX_SSL_CERT_PATH"}};
    ssl_certificate_key {{env "NGINX_SSL_KEY_PATH"}};
    ssl_prefer_server_ciphers on;
    ssl_protocols  SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    {{end}}

    client_max_body_size 0;
    chunked_transfer_encoding on;

    {{ with $domains := printf "nginx/%s/domains" $service.Name | key }}
      {{ if $domains }}
        server_name {{ $domains }};
      {{ else }}
        server_name "{{ $service.Name }}.{{if env "DOMAIN"}}{{env "DOMAIN"}}{{else}}dev{{end}}";
      {{ end }}
    {{ else }}
      server_name "{{ $service.Name }}.{{if env "DOMAIN"}}{{env "DOMAIN"}}{{else}}dev{{end}}";
    {{ end }}

    {{ with $server_config := printf "nginx/%s/server_config" $service.Name | key }}
      {{ $server_config }}
    {{ end }}

    location / {
      {{if env "LDAP_URL"}}
        auth_ldap "restricted access";
        auth_ldap_servers ldapserver;
      {{end}}
      proxy_pass http://{{ $service.Name }}/;
      include proxy.conf;

      {{ with $server_config_location := printf "nginx/%s/$server_config_location" $service.Name | key }}
        {{ $server_config_location }}
      {{ end }}
    }

  }
  {{ end }}{{ end }}

}
